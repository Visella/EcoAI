<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/bluejack242/ecoai/ui/component/FollowingPostCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/bluejack242/ecoai/ui/component/FollowingPostCard.kt" />
              <option name="originalContent" value="package com.bluejack242.ecoai.ui.component&#10;&#10;import android.net.Uri&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AccountCircle&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavHostController&#10;import androidx.compose.foundation.text.ClickableText&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.MoreVert&#10;import com.bluejack242.ecoai.utils.LanguageManager&#10;import com.bluejack242.ecoai.viewmodel.HomeViewModel&#10;import com.composables.icons.lucide.Bookmark&#10;import com.composables.icons.lucide.BookmarkPlus&#10;import com.composables.icons.lucide.Lucide&#10;import com.composables.icons.lucide.MessageCircle&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;&#10;fun FollowingPostCard(&#10;    postId: String,&#10;    profilePictureUrl: String? = null,&#10;    userId: String,&#10;    username: String,&#10;    title: String,&#10;    createdAt: Any? = null,&#10;    imageUrl: String? = null,&#10;    mediaList: List&lt;Map&lt;String, Any&gt;&gt; = emptyList(),&#10;    caption: String,&#10;    likes: Int = 0,&#10;    saves: Int = 0,&#10;    isLiked: Boolean = false,&#10;    isSaved: Boolean = false,&#10;    onLikeClick: (String) -&gt; Unit,&#10;    onSaveClick: (String) -&gt; Unit,&#10;    onCommentClick: (String) -&gt; Unit,&#10;    onDelete: (String) -&gt; Unit,&#10;    navController: NavHostController,&#10;    viewModel: HomeViewModel&#10;) {&#10;    var currentLikes by remember { mutableIntStateOf(likes) }&#10;    var currentSaves by remember { mutableIntStateOf(saves) }&#10;    var liked by remember { mutableStateOf(isLiked) }&#10;    var saved by remember { mutableStateOf(isSaved) }&#10;    var showBottomSheet by remember { mutableStateOf(false) }&#10;    var showDeleteDialog by remember { mutableStateOf(false) }&#10;    val currentUser = com.google.firebase.auth.FirebaseAuth.getInstance().currentUser&#10;    val isSelf = currentUser?.uid == userId&#10;    val commentList by remember { derivedStateOf { viewModel.commentsMap[postId] ?: emptyList() } }&#10;&#10;    LaunchedEffect(likes, saves, isLiked, isSaved) {&#10;        currentLikes = likes&#10;        currentSaves = saves&#10;        liked = isLiked&#10;        saved = isSaved&#10;    }&#10;&#10;    LaunchedEffect(postId) {&#10;        if (!viewModel.commentsMap.containsKey(postId)) {&#10;            viewModel.loadComments(postId)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(12.dp)&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .clickable { navController.navigate(&quot;user_profile/$userId&quot;) }&#10;            ) {&#10;                if (profilePictureUrl != null) {&#10;                    EcoAsyncImage(&#10;                        imageUrl = profilePictureUrl,&#10;                        contentDescription = &quot;Profile Picture&quot;,&#10;                        modifier = Modifier&#10;                            .size(40.dp)&#10;                            .clip(CircleShape),&#10;                        shape = CircleShape&#10;                    )&#10;                } else {&#10;                    Icon(&#10;                        imageVector = Icons.Default.AccountCircle,&#10;                        contentDescription = &quot;Default Profile&quot;,&#10;                        modifier = Modifier&#10;                            .size(40.dp)&#10;                            .clip(CircleShape)&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Column {&#10;                    Text(&quot;@$username&quot;, fontWeight = FontWeight.Bold)&#10;                    val dateString = remember(createdAt) {&#10;                        createdAt?.let {&#10;                            try {&#10;                                val timestamp = it as? com.google.firebase.Timestamp&#10;                                val date = timestamp?.let { t -&gt; java.util.Date(t.seconds * 1000) }&#10;                                    ?: (it as? java.util.Date)&#10;                                date?.let { d -&gt;&#10;                                    java.text.SimpleDateFormat(&quot;MM/dd/yyyy&quot;, java.util.Locale.getDefault()).format(d)&#10;                                } ?: &quot;&quot;&#10;                            } catch (e: Exception) { &quot;&quot; }&#10;                        } ?: &quot;&quot;&#10;                    }&#10;                    if (dateString.isNotBlank()) {&#10;                        Spacer(modifier = Modifier.height(2.dp))&#10;                        Text(dateString, fontSize = 12.sp, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    }&#10;                }&#10;            }&#10;            if (isSelf) {&#10;                IconButton(onClick = { showBottomSheet = true }) {&#10;                    Icon(Icons.Default.MoreVert, contentDescription = LanguageManager.getString(&quot;more&quot;))&#10;                }&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        val pagerMediaList = if (mediaList.isNotEmpty()) mediaList else if (!imageUrl.isNullOrEmpty()) listOf(mapOf(&quot;url&quot; to imageUrl)) else emptyList()&#10;        val pagerState = if (pagerMediaList.isNotEmpty()) androidx.compose.foundation.pager.rememberPagerState(pageCount = { pagerMediaList.size }) else null&#10;        var showPagerIndicator by remember { mutableStateOf(false) }&#10;        if (pagerMediaList.isNotEmpty() &amp;&amp; pagerState != null) {&#10;            LaunchedEffect(pagerState.currentPage) {&#10;                showPagerIndicator = true&#10;                kotlinx.coroutines.delay(1200)&#10;                showPagerIndicator = false&#10;            }&#10;            Box {&#10;                androidx.compose.foundation.pager.HorizontalPager(&#10;                    state = pagerState,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(220.dp)&#10;                        .clip(RoundedCornerShape(10.dp))&#10;                        .background(Color.LightGray)&#10;                ) { index -&gt;&#10;                    val media = pagerMediaList[index]&#10;                    val url = media[&quot;url&quot;] as? String&#10;                    if (!url.isNullOrEmpty()) {&#10;                        EcoAsyncImage(&#10;                            imageUrl = url,&#10;                            contentDescription = &quot;Post Image&quot;,&#10;                            modifier = Modifier.fillMaxSize()&#10;                        )&#10;                    } else {&#10;                        Text(&quot;No Image&quot;, color = Color.DarkGray)&#10;                    }&#10;                }&#10;                if (pagerMediaList.size &gt; 1 &amp;&amp; showPagerIndicator) {&#10;                    Text(&#10;                        text = &quot;${pagerState.currentPage + 1}/${pagerMediaList.size}&quot;,&#10;                        color = Color.White,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier&#10;                            .align(Alignment.TopEnd)&#10;                            .padding(8.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),&#10;                                shape = CircleShape&#10;                            )&#10;                            .padding(horizontal = 8.dp, vertical = 2.dp)&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        } else {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(220.dp)&#10;                    .clip(RoundedCornerShape(10.dp))&#10;                    .background(Color.LightGray),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&quot;No Image&quot;, color = Color.DarkGray)&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        }&#10;&#10;        if (title.isNotBlank() || caption.isNotBlank()) {&#10;            if (title.isNotBlank()) {&#10;                Text(&#10;                    text = title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;            }&#10;&#10;            val annotatedCaption = buildAnnotatedString {&#10;                val words = caption.split(&quot; &quot;)&#10;                words.forEachIndexed { index, word -&gt;&#10;                    if (word.startsWith(&quot;#&quot;)) {&#10;                        val tag = word.removePrefix(&quot;#&quot;)&#10;                        pushStringAnnotation(tag = &quot;TAG&quot;, annotation = tag)&#10;                        withStyle(&#10;                            style = SpanStyle(&#10;                                color = MaterialTheme.colorScheme.primary,&#10;                                textDecoration = TextDecoration.Underline,&#10;                                fontWeight = FontWeight.SemiBold&#10;                            )&#10;                        ) {&#10;                            append(word)&#10;                        }&#10;                        pop()&#10;                    } else {&#10;                        append(word)&#10;                    }&#10;                    if (index != words.lastIndex) append(&quot; &quot;)&#10;                }&#10;            }&#10;&#10;            if (caption.isNotBlank()) {&#10;                ClickableText(&#10;                    text = annotatedCaption,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontWeight = FontWeight.Normal,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    ),&#10;                    onClick = { offset -&gt;&#10;                        annotatedCaption.getStringAnnotations(tag = &quot;TAG&quot;, start = offset, end = offset)&#10;                            .firstOrNull()?.let { annotation -&gt;&#10;                                val tag = annotation.item&#10;                                navController.navigate(&quot;search/${Uri.encode(tag)}&quot;)&#10;                            }&#10;                    }&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 4.dp, vertical = 0.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        liked = !liked&#10;                        currentLikes += if (liked) 1 else -1&#10;                        onLikeClick(postId)&#10;                    }&#10;            ) {&#10;                Icon(&#10;                    imageVector = if (liked) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#10;                    contentDescription = &quot;Like&quot;,&#10;                    tint = if (liked) Color.Red else MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                if (currentLikes &gt; 0) {&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(currentLikes.toString(), fontSize = 15.sp, color = MaterialTheme.colorScheme.onSurface)&#10;                }&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { onCommentClick(postId) }&#10;                    .padding(start = 20.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Lucide.MessageCircle,&#10;                    contentDescription = &quot;Comment&quot;,&#10;                    tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                if (commentList.isNotEmpty()) {&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(commentList.size.toString(), fontSize = 15.sp, color = MaterialTheme.colorScheme.onSurface)&#10;                }&#10;            }&#10;        }&#10;&#10;        Box(&#10;            modifier = Modifier.weight(1f),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            if (pagerMediaList.size &gt; 1 &amp;&amp; pagerState != null) {&#10;                Row(&#10;                    horizontalArrangement = Arrangement.Center,&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    repeat(pagerMediaList.size) { i -&gt;&#10;                        Box(&#10;                            Modifier&#10;                                .size(if (pagerState.currentPage == i) 10.dp else 8.dp)&#10;                                .padding(2.dp)&#10;                                .background(&#10;                                    if (pagerState.currentPage == i) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.outlineVariant,&#10;                                    shape = CircleShape&#10;                                )&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.weight(1f, fill = false)&#10;        ) {&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        saved = !saved&#10;                        currentSaves += if (saved) 1 else -1&#10;                        onSaveClick(postId)&#10;                    }&#10;            ) {&#10;                Icon(&#10;                    imageVector = if (saved) Lucide.Bookmark else Lucide.BookmarkPlus,&#10;                    contentDescription = &quot;Save&quot;,&#10;                    tint = if (saved) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                if (currentSaves &gt; 0) {&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(currentSaves.toString(), fontSize = 15.sp, color = MaterialTheme.colorScheme.onSurface)&#10;                }&#10;            }&#10;        }&#10;        }&#10;&#10;        if (commentList.isNotEmpty()) {&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = LanguageManager.getString(&quot;top_comments&quot;),&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 14.sp&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            val currentUserId = com.google.firebase.auth.FirebaseAuth.getInstance().currentUser?.uid&#10;            val db = com.google.firebase.firestore.FirebaseFirestore.getInstance()&#10;            commentList.take(3).forEach { comment -&gt;&#10;                val commentId = comment[&quot;id&quot;] as? String&#10;                val likedBy = comment[&quot;likedBy&quot;] as? List&lt;*&gt; ?: emptyList&lt;Any&gt;()&#10;                val isCommentLiked = currentUserId != null &amp;&amp; likedBy.contains(currentUserId)&#10;                val likeCount = likedBy.size&#10;                var localLiked by remember(commentId) { mutableStateOf(isCommentLiked) }&#10;                var localLikeCount by remember(commentId) { mutableIntStateOf(likeCount) }&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 2.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    val commentProfileUrl = comment[&quot;profilePictureUrl&quot;] as? String&#10;                    if (commentProfileUrl != null) {&#10;                        EcoAsyncImage(&#10;                            imageUrl = commentProfileUrl,&#10;                            contentDescription = &quot;Commenter Profile&quot;,&#10;                            modifier = Modifier&#10;                                .size(20.dp)&#10;                                .clip(CircleShape),&#10;                            shape = CircleShape&#10;                        )&#10;                    } else {&#10;                        Icon(&#10;                            imageVector = Icons.Default.AccountCircle,&#10;                            contentDescription = &quot;Default Profile&quot;,&#10;                            modifier = Modifier.size(20.dp),&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(&#10;                        text = &quot;@${comment[&quot;username&quot;] ?: &quot;Unknown&quot;}&quot;,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontSize = 12.sp&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = comment[&quot;text&quot;] as? String ?: &quot;&quot;,&#10;                        fontSize = 12.sp,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier&#10;                            .clickable(enabled = commentId != null &amp;&amp; currentUserId != null) {&#10;                                if (commentId != null &amp;&amp; currentUserId != null) {&#10;                                    val ref = db.collection(&quot;posts&quot;).document(postId).collection(&quot;comments&quot;).document(commentId)&#10;                                    db.runTransaction { tx -&gt;&#10;                                        val snap = tx.get(ref)&#10;                                        val likedByList = (snap.get(&quot;likedBy&quot;) as? List&lt;*&gt;)?.map { it.toString() }?.toMutableList() ?: mutableListOf()&#10;                                        if (localLiked) likedByList.remove(currentUserId) else likedByList.add(currentUserId)&#10;                                        tx.update(ref, &quot;likedBy&quot;, likedByList)&#10;                                    }&#10;                                    localLiked = !localLiked&#10;                                    localLikeCount += if (localLiked) 1 else -1&#10;                                }&#10;                            }&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (localLiked) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#10;                            contentDescription = &quot;Like Comment&quot;,&#10;                            tint = if (localLiked) Color.Red else MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                        Text(&#10;                            text = localLikeCount.toString(),&#10;                            fontSize = 12.sp,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(start = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (showBottomSheet &amp;&amp; isSelf) {&#10;            ModalBottomSheet(&#10;                onDismissRequest = { showBottomSheet = false },&#10;                sheetState = rememberModalBottomSheetState()&#10;            ) {&#10;                Column(Modifier.fillMaxWidth()) {&#10;                    ListItem(&#10;                        headlineContent = { Text(LanguageManager.getString(&quot;delete&quot;)) },&#10;                        leadingContent = { Icon(Icons.Default.Delete, contentDescription = null) },&#10;                        modifier = Modifier.clickable {&#10;                            showBottomSheet = false&#10;                            showDeleteDialog = true&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        if (showDeleteDialog) {&#10;            CustomDialog(&#10;                title = LanguageManager.getString(&quot;delete_confirmation&quot;),&#10;                message = LanguageManager.getString(&quot;delete_post_confirmation_message&quot;),&#10;                confirmText = LanguageManager.getString(&quot;delete&quot;),&#10;                onConfirm = {&#10;                    showDeleteDialog = false&#10;                    onDelete(postId)&#10;                },&#10;                onDismiss = { showDeleteDialog = false },&#10;                dialogType = DialogType.Confirm,&#10;                showDismiss = true,&#10;                dismissText = LanguageManager.getString(&quot;cancel&quot;)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.bluejack242.ecoai.ui.component&#10;&#10;import android.net.Uri&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.AccountCircle&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavHostController&#10;import androidx.compose.foundation.text.ClickableText&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material.icons.filled.MoreVert&#10;import com.bluejack242.ecoai.utils.LanguageManager&#10;import com.bluejack242.ecoai.viewmodel.HomeViewModel&#10;import com.composables.icons.lucide.Bookmark&#10;import com.composables.icons.lucide.BookmarkPlus&#10;import com.composables.icons.lucide.Lucide&#10;import com.composables.icons.lucide.MessageCircle&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;&#10;fun FollowingPostCard(&#10;    postId: String,&#10;    profilePictureUrl: String? = null,&#10;    userId: String,&#10;    username: String,&#10;    title: String,&#10;    createdAt: Any? = null,&#10;    imageUrl: String? = null,&#10;    mediaList: List&lt;Map&lt;String, Any&gt;&gt; = emptyList(),&#10;    caption: String,&#10;    likes: Int = 0,&#10;    saves: Int = 0,&#10;    isLiked: Boolean = false,&#10;    isSaved: Boolean = false,&#10;    onLikeClick: (String) -&gt; Unit,&#10;    onSaveClick: (String) -&gt; Unit,&#10;    onCommentClick: (String) -&gt; Unit,&#10;    onDelete: (String) -&gt; Unit,&#10;    navController: NavHostController,&#10;    viewModel: HomeViewModel&#10;) {&#10;    var currentLikes by remember { mutableIntStateOf(likes) }&#10;    var currentSaves by remember { mutableIntStateOf(saves) }&#10;    var liked by remember { mutableStateOf(isLiked) }&#10;    var saved by remember { mutableStateOf(isSaved) }&#10;    var showBottomSheet by remember { mutableStateOf(false) }&#10;    var showDeleteDialog by remember { mutableStateOf(false) }&#10;    val currentUser = com.google.firebase.auth.FirebaseAuth.getInstance().currentUser&#10;    val isSelf = currentUser?.uid == userId&#10;    val commentList by remember { derivedStateOf { viewModel.commentsMap[postId] ?: emptyList() } }&#10;&#10;    LaunchedEffect(likes, saves, isLiked, isSaved) {&#10;        currentLikes = likes&#10;        currentSaves = saves&#10;        liked = isLiked&#10;        saved = isSaved&#10;    }&#10;&#10;    LaunchedEffect(postId) {&#10;        if (!viewModel.commentsMap.containsKey(postId)) {&#10;            viewModel.loadComments(postId)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(12.dp)&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .clickable { navController.navigate(&quot;user_profile/$userId&quot;) }&#10;            ) {&#10;                if (profilePictureUrl != null) {&#10;                    EcoAsyncImage(&#10;                        imageUrl = profilePictureUrl,&#10;                        contentDescription = &quot;Profile Picture&quot;,&#10;                        modifier = Modifier&#10;                            .size(40.dp)&#10;                            .clip(CircleShape),&#10;                        shape = CircleShape&#10;                    )&#10;                } else {&#10;                    Icon(&#10;                        imageVector = Icons.Default.AccountCircle,&#10;                        contentDescription = &quot;Default Profile&quot;,&#10;                        modifier = Modifier&#10;                            .size(40.dp)&#10;                            .clip(CircleShape)&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Column {&#10;                    Text(&quot;@$username&quot;, fontWeight = FontWeight.Bold)&#10;                    val dateString = remember(createdAt) {&#10;                        createdAt?.let {&#10;                            try {&#10;                                val timestamp = it as? com.google.firebase.Timestamp&#10;                                val date = timestamp?.let { t -&gt; java.util.Date(t.seconds * 1000) }&#10;                                    ?: (it as? java.util.Date)&#10;                                date?.let { d -&gt;&#10;                                    java.text.SimpleDateFormat(&quot;MM/dd/yyyy&quot;, java.util.Locale.getDefault()).format(d)&#10;                                } ?: &quot;&quot;&#10;                            } catch (e: Exception) { &quot;&quot; }&#10;                        } ?: &quot;&quot;&#10;                    }&#10;                    if (dateString.isNotBlank()) {&#10;                        Spacer(modifier = Modifier.height(2.dp))&#10;                        Text(dateString, fontSize = 12.sp, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    }&#10;                }&#10;            }&#10;            if (isSelf) {&#10;                IconButton(onClick = { showBottomSheet = true }) {&#10;                    Icon(Icons.Default.MoreVert, contentDescription = LanguageManager.getString(&quot;more&quot;))&#10;                }&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        val pagerMediaList = if (mediaList.isNotEmpty()) mediaList else if (!imageUrl.isNullOrEmpty()) listOf(mapOf(&quot;url&quot; to imageUrl)) else emptyList()&#10;        val pagerState = if (pagerMediaList.isNotEmpty()) androidx.compose.foundation.pager.rememberPagerState(pageCount = { pagerMediaList.size }) else null&#10;        var showPagerIndicator by remember { mutableStateOf(false) }&#10;        if (pagerMediaList.isNotEmpty() &amp;&amp; pagerState != null) {&#10;            LaunchedEffect(pagerState.currentPage) {&#10;                showPagerIndicator = true&#10;                kotlinx.coroutines.delay(1200)&#10;                showPagerIndicator = false&#10;            }&#10;            Box {&#10;                androidx.compose.foundation.pager.HorizontalPager(&#10;                    state = pagerState,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(220.dp)&#10;                        .clip(RoundedCornerShape(10.dp))&#10;                        .background(Color.LightGray)&#10;                ) { index -&gt;&#10;                    val media = pagerMediaList[index]&#10;                    val url = media[&quot;url&quot;] as? String&#10;                    if (!url.isNullOrEmpty()) {&#10;                        EcoAsyncImage(&#10;                            imageUrl = url,&#10;                            contentDescription = &quot;Post Image&quot;,&#10;                            modifier = Modifier.fillMaxSize()&#10;                        )&#10;                    } else {&#10;                        Text(&quot;No Image&quot;, color = Color.DarkGray)&#10;                    }&#10;                }&#10;                if (pagerMediaList.size &gt; 1 &amp;&amp; showPagerIndicator) {&#10;                    Text(&#10;                        text = &quot;${pagerState.currentPage + 1}/${pagerMediaList.size}&quot;,&#10;                        color = Color.White,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier&#10;                            .align(Alignment.TopEnd)&#10;                            .padding(8.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f),&#10;                                shape = CircleShape&#10;                            )&#10;                            .padding(horizontal = 8.dp, vertical = 2.dp)&#10;                    )&#10;                }&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        } else {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(220.dp)&#10;                    .clip(RoundedCornerShape(10.dp))&#10;                    .background(Color.LightGray),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&quot;No Image&quot;, color = Color.DarkGray)&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        }&#10;&#10;        if (title.isNotBlank() || caption.isNotBlank()) {&#10;            if (title.isNotBlank()) {&#10;                Text(&#10;                    text = title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;            }&#10;&#10;            val annotatedCaption = buildAnnotatedString {&#10;                val words = caption.split(&quot; &quot;)&#10;                words.forEachIndexed { index, word -&gt;&#10;                    if (word.startsWith(&quot;#&quot;)) {&#10;                        val tag = word.removePrefix(&quot;#&quot;)&#10;                        pushStringAnnotation(tag = &quot;TAG&quot;, annotation = tag)&#10;                        withStyle(&#10;                            style = SpanStyle(&#10;                                color = MaterialTheme.colorScheme.primary,&#10;                                textDecoration = TextDecoration.Underline,&#10;                                fontWeight = FontWeight.SemiBold&#10;                            )&#10;                        ) {&#10;                            append(word)&#10;                        }&#10;                        pop()&#10;                    } else {&#10;                        append(word)&#10;                    }&#10;                    if (index != words.lastIndex) append(&quot; &quot;)&#10;                }&#10;            }&#10;&#10;            if (caption.isNotBlank()) {&#10;                ClickableText(&#10;                    text = annotatedCaption,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontWeight = FontWeight.Normal,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    ),&#10;                    onClick = { offset -&gt;&#10;                        annotatedCaption.getStringAnnotations(tag = &quot;TAG&quot;, start = offset, end = offset)&#10;                            .firstOrNull()?.let { annotation -&gt;&#10;                                val tag = annotation.item&#10;                                navController.navigate(&quot;search/${Uri.encode(tag)}&quot;)&#10;                            }&#10;                    }&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 4.dp, vertical = 0.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        liked = !liked&#10;                        currentLikes += if (liked) 1 else -1&#10;                        onLikeClick(postId)&#10;                    }&#10;            ) {&#10;                Icon(&#10;                    imageVector = if (liked) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#10;                    contentDescription = &quot;Like&quot;,&#10;                    tint = if (liked) Color.Red else MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                if (currentLikes &gt; 0) {&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(currentLikes.toString(), fontSize = 15.sp, color = MaterialTheme.colorScheme.onSurface)&#10;                }&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { onCommentClick(postId) }&#10;                    .padding(start = 20.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = Lucide.MessageCircle,&#10;                    contentDescription = &quot;Comment&quot;,&#10;                    tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                if (commentList.isNotEmpty()) {&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(commentList.size.toString(), fontSize = 15.sp, color = MaterialTheme.colorScheme.onSurface)&#10;                }&#10;            }&#10;        }&#10;&#10;        Box(&#10;            modifier = Modifier.weight(1f),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            if (pagerMediaList.size &gt; 1 &amp;&amp; pagerState != null) {&#10;                Row(&#10;                    horizontalArrangement = Arrangement.Center,&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    repeat(pagerMediaList.size) { i -&gt;&#10;                        Box(&#10;                            Modifier&#10;                                .size(if (pagerState.currentPage == i) 10.dp else 8.dp)&#10;                                .padding(2.dp)&#10;                                .background(&#10;                                    if (pagerState.currentPage == i) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.outlineVariant,&#10;                                    shape = CircleShape&#10;                                )&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier.weight(1f, fill = false)&#10;        ) {&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        saved = !saved&#10;                        currentSaves += if (saved) 1 else -1&#10;                        onSaveClick(postId)&#10;                    }&#10;            ) {&#10;                Icon(&#10;                    imageVector = if (saved) Lucide.Bookmark else Lucide.BookmarkPlus,&#10;                    contentDescription = &quot;Save&quot;,&#10;                    tint = if (saved) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                if (currentSaves &gt; 0) {&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(currentSaves.toString(), fontSize = 15.sp, color = MaterialTheme.colorScheme.onSurface)&#10;                }&#10;            }&#10;        }&#10;        }&#10;&#10;        if (commentList.isNotEmpty()) {&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = LanguageManager.getString(&quot;top_comments&quot;),&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 14.sp&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;&#10;            val currentUserId = com.google.firebase.auth.FirebaseAuth.getInstance().currentUser?.uid&#10;            val db = com.google.firebase.firestore.FirebaseFirestore.getInstance()&#10;            commentList.take(3).forEach { comment -&gt;&#10;                val commentId = comment[&quot;id&quot;] as? String&#10;                val likedBy = comment[&quot;likedBy&quot;] as? List&lt;*&gt; ?: emptyList&lt;Any&gt;()&#10;                val isCommentLiked = currentUserId != null &amp;&amp; likedBy.contains(currentUserId)&#10;                val likeCount = likedBy.size&#10;                var localLiked by remember(commentId) { mutableStateOf(isCommentLiked) }&#10;                var localLikeCount by remember(commentId) { mutableIntStateOf(likeCount) }&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 2.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    val commentProfileUrl = comment[&quot;profilePictureUrl&quot;] as? String&#10;                    if (commentProfileUrl != null) {&#10;                        EcoAsyncImage(&#10;                            imageUrl = commentProfileUrl,&#10;                            contentDescription = &quot;Commenter Profile&quot;,&#10;                            modifier = Modifier&#10;                                .size(20.dp)&#10;                                .clip(CircleShape),&#10;                            shape = CircleShape&#10;                        )&#10;                    } else {&#10;                        Icon(&#10;                            imageVector = Icons.Default.AccountCircle,&#10;                            contentDescription = &quot;Default Profile&quot;,&#10;                            modifier = Modifier.size(20.dp),&#10;                            tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(&#10;                        text = &quot;@${comment[&quot;username&quot;] ?: &quot;Unknown&quot;}&quot;,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontSize = 12.sp&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = comment[&quot;text&quot;] as? String ?: &quot;&quot;,&#10;                        fontSize = 12.sp,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier&#10;                            .clickable(enabled = commentId != null &amp;&amp; currentUserId != null) {&#10;                                if (commentId != null &amp;&amp; currentUserId != null) {&#10;                                    val ref = db.collection(&quot;posts&quot;).document(postId).collection(&quot;comments&quot;).document(commentId)&#10;                                    db.runTransaction { tx -&gt;&#10;                                        val snap = tx.get(ref)&#10;                                        val likedByList = (snap.get(&quot;likedBy&quot;) as? List&lt;*&gt;)?.map { it.toString() }?.toMutableList() ?: mutableListOf()&#10;                                        if (localLiked) likedByList.remove(currentUserId) else likedByList.add(currentUserId)&#10;                                        tx.update(ref, &quot;likedBy&quot;, likedByList)&#10;                                    }&#10;                                    localLiked = !localLiked&#10;                                    localLikeCount += if (localLiked) 1 else -1&#10;                                }&#10;                            }&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (localLiked) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#10;                            contentDescription = &quot;Like Comment&quot;,&#10;                            tint = if (localLiked) Color.Red else MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                        Text(&#10;                            text = localLikeCount.toString(),&#10;                            fontSize = 12.sp,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(start = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (showBottomSheet &amp;&amp; isSelf) {&#10;            ModalBottomSheet(&#10;                onDismissRequest = { showBottomSheet = false },&#10;                sheetState = rememberModalBottomSheetState()&#10;            ) {&#10;                Column(Modifier.fillMaxWidth()) {&#10;                    ListItem(&#10;                        headlineContent = { Text(LanguageManager.getString(&quot;delete&quot;)) },&#10;                        leadingContent = { Icon(Icons.Default.Delete, contentDescription = null) },&#10;                        modifier = Modifier.clickable {&#10;                            showBottomSheet = false&#10;                            showDeleteDialog = true&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        if (showDeleteDialog) {&#10;            CustomDialog(&#10;                title = LanguageManager.getString(&quot;delete_confirmation&quot;),&#10;                message = LanguageManager.getString(&quot;delete_post_confirmation_message&quot;),&#10;                confirmText = LanguageManager.getString(&quot;delete&quot;),&#10;                onConfirm = {&#10;                    showDeleteDialog = false&#10;                    onDelete(postId)&#10;                },&#10;                onDismiss = { showDeleteDialog = false },&#10;                dialogType = DialogType.Confirm,&#10;                showDismiss = true,&#10;                dismissText = LanguageManager.getString(&quot;cancel&quot;)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>